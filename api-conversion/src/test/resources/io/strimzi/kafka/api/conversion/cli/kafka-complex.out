---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  labels:
    app: my-cluster
spec:
  kafka:
    replicas: 3
    listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
      authentication:
        type: scram-sha-512
      networkPolicyPeers:
      - podSelector:
          matchLabels:
            app: kafka-consumer
      - podSelector:
          matchLabels:
            app: kafka-producer
      - podSelector:
          matchLabels:
            app: java-kafka-consumer
      - podSelector:
          matchLabels:
            app: java-kafka-producer
      - podSelector:
          matchLabels:
            app: java-kafka-streams
      - podSelector:
          matchLabels:
            app: my-connect
      - podSelector:
          matchLabels:
            app: my-connect-s2i
      - podSelector:
          matchLabels:
            app: my-bridge
    - name: tls
      port: 9093
      type: internal
      tls: true
      authentication:
        type: tls
      networkPolicyPeers:
      - podSelector:
          matchLabels:
            app: kafka-consumer
      - podSelector:
          matchLabels:
            app: kafka-producer
      - podSelector:
          matchLabels:
            app: java-kafka-consumer
      - podSelector:
          matchLabels:
            app: java-kafka-producer
      - podSelector:
          matchLabels:
            app: java-kafka-streams
      - podSelector:
          matchLabels:
            app: my-connect
      - podSelector:
          matchLabels:
            app: my-connect-s2i
      - podSelector:
          matchLabels:
            app: my-bridge
    - name: external
      port: 9094
      type: nodeport
      tls: true
      authentication:
        type: tls
    config:
      auto.create.topics.enable: "false"
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      replica.selector.class: org.apache.kafka.common.replica.RackAwareReplicaSelector
    storage:
      volumes:
      - type: persistent-claim
        size: 100Gi
        class: ssd
        deleteClaim: true
        id: 0
      type: jbod
    authorization:
      type: simple
      superUsers:
      - CN=my-connect
      - my-connect
      - CN=my-bridge
      - my-bridge
    rack:
      topologyKey: kubernetes.io/hostname
    livenessProbe: {}
    readinessProbe: {}
    jvmOptions:
      "-Xmx": 1024m
      "-Xms": 1024m
    resources:
      limits:
        memory: 2Gi
        cpu: 1
      requests:
        memory: 2Gi
        cpu: 500m
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          key: my-cluster-kafka-jmx-exporter-configuration.yaml
          name: my-cluster-kafka-jmx-exporter-configuration
    template:
      statefulset:
        metadata:
          labels:
            key1: label1x
            key2: label2x
            app.kubernetes.io/part-of: part-of-something
            app.kubernetes.io/managed-by: managed-by-something
          annotations:
            akey1: label1
            akey2: label2
      pod:
        metadata:
          labels:
            key1: label1y
            key2: label2y
          annotations:
            akey1: label1
            akey2: label2
        securityContext:
          fsGroup: 1000001
          runAsGroup: 1000001
          runAsUser: 1000001
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: dedicated
                  operator: In
                  values:
                  - Kafka
        tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: Kafka
      bootstrapService:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      brokersService:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      externalBootstrapService:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      perPodService:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      externalBootstrapRoute:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      perPodRoute:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      persistentVolumeClaim:
        metadata:
          labels:
            testLabel: testValue
          annotations:
            testAnno: testValue
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 100Gi
      class: ssd
      deleteClaim: true
    livenessProbe: {}
    readinessProbe: {}
    jvmOptions:
      "-Xmx": 512m
      "-Xms": 512m
    resources:
      limits:
        memory: 1Gi
        cpu: 0.5
      requests:
        memory: 1Gi
        cpu: 0.3
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          key: my-cluster-zookeeper-jmx-exporter-configuration.yaml
          name: my-cluster-zookeeper-jmx-exporter-configuration
    template:
      statefulset:
        metadata:
          labels:
            key1: label1z
            key2: label2z
          annotations:
            akey1: label1
            akey2: label2
      pod:
        metadata:
          labels:
            key1: label1v
            key2: label2v
          annotations:
            akey1: label1
            akey2: label2
        securityContext:
          fsGroup: 1000001
          runAsGroup: 1000001
          runAsUser: 1000001
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: dedicated
                  operator: In
                  values:
                  - Kafka
        tolerations:
        - effect: NoSchedule
          key: dedicated
          operator: Equal
          value: Kafka
      clientService:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      nodesService:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      persistentVolumeClaim:
        metadata:
          labels:
            testLabel: testValue
          annotations:
            testAnno: testValue
  entityOperator:
    topicOperator:
      resources:
        requests:
          memory: 256Mi
          cpu: 0.2
        limits:
          memory: 256Mi
          cpu: 0.5
      logging:
        loggers:
          rootLogger.level: DEBUG
        type: inline
    userOperator:
      resources:
        requests:
          memory: 512Mi
          cpu: 0.2
        limits:
          memory: 512Mi
          cpu: 0.5
      logging:
        loggers:
          rootLogger.level: INFO
        type: inline
    template:
      deployment:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      pod:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
  kafkaExporter:
    resources:
      requests:
        memory: 256Mi
        cpu: 0.1
      limits:
        memory: 256Mi
        cpu: 0.5
    template:
      deployment:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      pod:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      service:
        metadata:
          labels:
            key1: label1
            key2: label2
          annotations:
            akey1: label1
            akey2: label2
      container:
        env:
        - name: SOME-ENV
          value: someValue
  cruiseControl:
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          key: my-cluster-cruise-control-jmx-exporter-configuration.yaml
          name: my-cluster-cruise-control-jmx-exporter-configuration
  clusterCa:
    validityDays: 1000
  clientsCa:
    validityDays: 1000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-cluster-kafka-jmx-exporter-configuration
data:
  my-cluster-kafka-jmx-exporter-configuration.yaml: |
    lowercaseOutputName: true
    rules:
    - pattern: "kafka.server<type=(.+), name=(.+), clientId=(.+), topic=(.+), partition=(.*)><>Value"
      name: "kafka_server_$1_$2"
      type: "GAUGE"
      labels:
        clientId: "$3"
        topic: "$4"
        partition: "$5"
    - pattern: "kafka.server<type=(.+), name=(.+), clientId=(.+), brokerHost=(.+), brokerPort=(.+)><>Value"
      name: "kafka_server_$1_$2"
      type: "GAUGE"
      labels:
        clientId: "$3"
        broker: "$4:$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*><>MeanRate"
      name: "kafka_$1_$2_$3_percent"
      type: "GAUGE"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*><>Value"
      name: "kafka_$1_$2_$3_percent"
      type: "GAUGE"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)Percent\\w*, (.+)=(.+)><>Value"
      name: "kafka_$1_$2_$3_percent"
      type: "GAUGE"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*, (.+)=(.+), (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_total"
      type: "COUNTER"
      labels:
        $4: "$5"
        $6: "$7"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*, (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_total"
      type: "COUNTER"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)PerSec\\w*><>Count"
      name: "kafka_$1_$2_$3_total"
      type: "COUNTER"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Value"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
        $6: "$7"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+)><>Value"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)><>Value"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+), (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_count"
      type: "COUNTER"
      labels:
        $4: "$5"
        $6: "$7"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.*), (.+)=(.+)><>(\\d+)thPercentile"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
        $6: "$7"
        quantile: "0.$8"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.+)><>Count"
      name: "kafka_$1_$2_$3_count"
      type: "COUNTER"
      labels:
        $4: "$5"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+), (.+)=(.*)><>(\\d+)thPercentile"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        $4: "$5"
        quantile: "0.$6"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)><>Count"
      name: "kafka_$1_$2_$3_count"
      type: "COUNTER"
    - pattern: "kafka.(\\w+)<type=(.+), name=(.+)><>(\\d+)thPercentile"
      name: "kafka_$1_$2_$3"
      type: "GAUGE"
      labels:
        quantile: "0.$4"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-cluster-zookeeper-jmx-exporter-configuration
data:
  my-cluster-zookeeper-jmx-exporter-configuration.yaml: |
    lowercaseOutputName: true
    rules:
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+)><>(\\w+)"
      name: "zookeeper_$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\\
        d+)><>(\\w+)"
      name: "zookeeper_$3"
      labels:
        replicaId: "$2"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\\
        d+), name2=(\\w+)><>(\\w+)"
      name: "zookeeper_$4"
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=ReplicatedServer_id(\\d+), name1=replica.(\\\
        d+), name2=(\\w+), name3=(\\w+)><>(\\w+)"
      name: "zookeeper_$4_$5"
      labels:
        replicaId: "$2"
        memberType: "$3"
    - pattern: "org.apache.ZooKeeperService<name0=StandaloneServer_port(\\d+)><>(\\w+)"
      name: "zookeeper_$2"
    - pattern: "org.apache.ZooKeeperService<name0=StandaloneServer_port(\\d+), name1=(InMemoryDataTree)><>(\\\
        w+)"
      name: "zookeeper_$2_$3"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-cluster-cruise-control-jmx-exporter-configuration
data:
  my-cluster-cruise-control-jmx-exporter-configuration.yaml: |
    lowercaseOutputName: true
    rules:
    - pattern: "kafka.cruisecontrol<name=(.+)><>(\\w+)"
      name: "kafka_cruisecontrol_$1_$2"
      type: "GAUGE"